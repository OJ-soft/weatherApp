import React, { useState } from "react";
import keys from "./keys";

import { BrowserRouter as Router, Route, Link, Switch } from "react-router-dom";

import Plotly from "plotly.js"
import createPlotlyComponent from 'react-plotly.js/factory';
const Plot = createPlotlyComponent(Plotly);

const api = {
  key: keys.API_KEY,
  base: keys.BASE_URL,
};

const Time = (a) => {
  var h = new Date();
  h = h.getHours();

  var t1 = h%3
  h = h -t1

  h = h + a 
  if(h > 24){
    h = h - 24
    h = "tomorow " + h
  }
  return h;
};


var weatherplot = []
var trace1
var trace2

function Mday() {
  const dateBuild = (d) => {
    let date = String(new window.Date());
    date = date.slice(3, 15);
    return date;
  };

  const [query, setQuery] = useState("");
  const [metadata, setMetadata] = useState("");
  const [weather, setWeather] = useState([]);
  const search = (e) => {
    if (e.key === "Enter") {
      fetch(`${api.base}forecast?q=${query}&units=metric&APPID=${api.key}`)
        .then((res) => res.json())
        .then((result) => {
          setQuery("");
          setMetadata(result)
          setWeather([result.list[0], result.list[1], result.list[2], result.list[3], result.list[4], result.list[5], result.list[6], result.list[7], result.list[8], result.list[9], result.list[10], result.list[11], result.list[12], result.list[13], result.list[14], result.list[15], result.list[16], result.list[17], result.list[18], result.list[19], result.list[20], result.list[21], result.list[22], result.list[23], result.list[24], result.list[25], result.list[26], result.list[27], result.list[28], result.list[29], result.list[30], result.list[31], result.list[32], result.list[33], result.list[34], result.list[35], result.list[36], result.list[37], result.list[38], result.list[39]]);
          console.log(result);
        });
    }
  };

  return (
    <div>
      <main>

      <top>
        <div class="top-content">
          <div class="top-text">
            <h1>WeatherWebApp</h1>
            <h2>made by <b>Mikołaj</b> and <b>Olek</b><p>&nbsp;</p> </h2>
          </div>
          <div class="contentDiv">
            {/*<img class="arrow" url="./pics/arrow.jpg"/>*/}
          </div>
        </div>
      </top>

      <navbar>
        <ul class="navbar">
          <li><Link to="/Landing">Home</Link></li>
          <li><Link to="/Now">Now</Link></li>
          <li><Link to="/day">24 hours</Link></li>
          <li><Link to="/mday">5 day</Link></li>
        </ul>
      </navbar>

      <div className="search-container">
      <br></br>
        <h4>Enter where you want to check the weather at</h4>
        <input
          type="text"
          placeholder="Search..."
          className="search-bar"
          onChange={(e) => setQuery(e.target.value)}
          value={query}
          onKeyPress={search}
        />
      </div>

      {weather.length !== 0 ? (
        <div>
        <div className="location-container">
          <div className="location">
              {metadata.city.name}, {metadata.city.country}
          </div>
          <div className="date"> {dateBuild(0)}</div>
        </div>

        <div className="temperature-polt"><Plot
          data={[
            trace1= {
              x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
              y: [Math.round(weather[0].main.temp), Math.round(weather[1].main.temp), Math.round(weather[2].main.temp), Math.round(weather[3].main.temp), Math.round(weather[4].main.temp), Math.round(weather[5].main.temp), Math.round(weather[6].main.temp), Math.round(weather[7].main.temp), Math.round(weather[8].main.temp), Math.round(weather[9].main.temp), Math.round(weather[10].main.temp), Math.round(weather[11].main.temp), Math.round(weather[12].main.temp), Math.round(weather[13].main.temp), Math.round(weather[14].main.temp), Math.round(weather[15].main.temp), Math.round(weather[16].main.temp), Math.round(weather[17].main.temp), Math.round(weather[18].main.temp), Math.round(weather[19].main.temp), Math.round(weather[20].main.temp), Math.round(weather[21].main.temp), Math.round(weather[22].main.temp), Math.round(weather[23].main.temp), Math.round(weather[25].main.temp), Math.round(weather[26].main.temp), Math.round(weather[27].main.temp), Math.round(weather[28].main.temp), Math.round(weather[29].main.temp), Math.round(weather[30].main.temp), Math.round(weather[31].main.temp), Math.round(weather[32].main.temp), Math.round(weather[33].main.temp), Math.round(weather[34].main.temp), Math.round(weather[35].main.temp), Math.round(weather[36].main.temp), Math.round(weather[37].main.temp), Math.round(weather[38].main.temp), Math.round(weather[39].main.temp)],
              name: 'Temperature',
              mode: 'lines',
              marker: {color: 'red'},
              align: 'center',
            },
            trace2= {
              x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
              y: [Math.round(weather[0].main.feels_like), Math.round(weather[1].main.feels_like), Math.round(weather[2].main.feels_like), Math.round(weather[3].main.feels_like), Math.round(weather[4].main.feels_like), Math.round(weather[5].main.feels_like), Math.round(weather[6].main.feels_like), Math.round(weather[7].main.feels_like), Math.round(weather[8].main.feels_like), Math.round(weather[9].main.feels_like), Math.round(weather[10].main.feels_like), Math.round(weather[11].main.feels_like), Math.round(weather[12].main.feels_like), Math.round(weather[13].main.feels_like), Math.round(weather[14].main.feels_like), Math.round(weather[15].main.feels_like), Math.round(weather[16].main.feels_like), Math.round(weather[17].main.feels_like), Math.round(weather[18].main.feels_like), Math.round(weather[19].main.feels_like), Math.round(weather[20].main.feels_like), Math.round(weather[21].main.feels_like), Math.round(weather[22].main.feels_like), Math.round(weather[23].main.feels_like), Math.round(weather[25].main.feels_like), Math.round(weather[26].main.feels_like), Math.round(weather[27].main.feels_like), Math.round(weather[28].main.feels_like), Math.round(weather[29].main.feels_like), Math.round(weather[30].main.feels_like), Math.round(weather[31].main.feels_like), Math.round(weather[32].main.feels_like), Math.round(weather[33].main.feels_like), Math.round(weather[34].main.feels_like), Math.round(weather[35].main.feels_like), Math.round(weather[36].main.feels_like), Math.round(weather[37].main.feels_like), Math.round(weather[38].main.feels_like), Math.round(weather[39].main.feels_like)],
              name: 'Sensed temperature',
              mode: 'lines',
              marker: {color: 'blue'},
              align: 'center',
            },
          ]}
          layout={{
            width: 1200,
            height: 400,
            plot_bgcolor: '#e3e3e3',
            showlegend: true,
            legend: {
              x: 1,
              y: 0,
              xanchor: 'right',
              bgcolor: '#e3e3e3',
            }
          }}
          config={{displayModeBar: false}}
        /></div>

        <div class="container-flex">
          <div className="weather-container">
            <div className="temperature">
              {Math.round(weather[0].main.temp)}°C
            </div>
            <div className="weather">{weather[0].weather[0].main}</div>
          </div>
            
          <div className="weather-container">
            <div className="temperature">
              {Math.round(weather[1].main.temp)}°C
            </div>
            <div className="weather">{weather[1].weather[0].main}</div>
          </div>
            
          <div className="weather-container">
            <div className="temperature">
              {Math.round(weather[2].main.temp)}°C
            </div>
            <div className="weather">{weather[2].weather[0].main}</div>
          </div>
   
          <div className="weather-container">
            <div className="temperature">
              {Math.round(weather[3].main.temp)}°C
            </div>
            <div className="weather">{weather[3].weather[0].main}</div>
          </div>

          <div className="weather-container">
            <div className="temperature">
              {Math.round(weather[4].main.temp)}°C
            </div>
            <div className="weather">{weather[4].weather[0].main}</div>
          </div>
        </div>
      </div> 
        ) : (
          ""
        )}
      </main>
    </div>
  );
}

export default Mday;